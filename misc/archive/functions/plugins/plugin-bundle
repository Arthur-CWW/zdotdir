#!/usr/bin/env zsh

# plugin-bundle
# A simple antibody replacement: https://getantibody.github.io/
# plugin-bundle < ${ZDOTDIR:-~}/.zsh_plugins.txt > ${ZDOTDIR:-~}/.zsh_plugins.zsh

# if stdin containts no data, there's nothing to bundle
[[ ! -t 0 ]] || return
local ZPLUGINDIR=${ZPLUGINDIR:-${ZDOTDIR:-$HOME}/.zplugins}
local zsh_plugins=()

# this handles both <redirected or piped| input
while read -r data; do
  zsh_plugins+=($data)
done

local line line_parts plugin instructions repo
local plugin_name branch giturl subpath
local initfiles initfile
for line in $zsh_plugins; do
  # skip comments
  [[ $line != \#* ]] || continue

  line_parts=($(echo $line | tr ' ' '\n'))
  plugin=$line_parts[1]
  instructions=("${line_parts[@]:1}")

  # # if the plugin starts with a $variable, expand it
  # if [[ $plugin = "\$"* ]]; then
  #   plugin=$(eval echo $plugin)
  # fi

  # detect whether we have a repo (files and dirs exist, or start with a slash)
  # repos are URLs or owner/repo short strings
  if [[ ! -f $plugin ]] && [[ ! -d $plugin ]] && [[ $plugin != \/* ]]; then
    # git repo plugin
    repo=$plugin
    plugin_name=${repo:t}
    plugin=$ZPLUGINDIR/$plugin_name
    if [[ ! -d $plugin ]]; then
      # turn 'branch:main' into '--branch=main' for git command
      branch=$instructions[(r)branch:*]
      branch=${branch:s/branch:/--branch=/}
      if [[ $repo != git://* &&
        $repo != https://* &&
        $repo != http://* &&
        $repo != ssh://* &&
        $repo != git@*:*/* ]]
      then
        giturl=https://github.com/$repo
      else
        giturl=$repo
      fi
      git clone $branch --quiet --depth 1 --recursive --shallow-submodules $giturl $plugin
    fi
    # if kind:clone then we're done
    (( ! $instructions[(Ie)kind:clone] )) || continue
  fi

  # if 'path:*' instruction specified, we need a subdir or subfile of the plugin
  subpath=$instructions[(r)path:*]
  subpath="${subpath#*path:}"
  if [[ -n $subpath ]]; then
    plugin=$plugin/$subpath
  fi

  # if the plugin is just a file, source it and move to the next one
  if [[ -f $plugin ]]; then
    echo "source $plugin"
    continue
  fi

  if [[ ! -d $plugin ]]; then
    echo "# ERROR: plugin directory not found $plugin" && continue
    continue
  fi

  if (( $instructions[(Ie)kind:fpath] )); then
    echo "fpath+=( $plugin )"
  elif (( $instructions[(Ie)kind:path] )); then
    echo "export PATH=\"$plugin:\$PATH\""
  else
    initfiles=(
      $plugin/${plugin:t}.plugin.zsh(N)
      $plugin/${plugin:t}.zsh(N)
      $plugin/init.zsh(N)
      $plugin/*.plugin.{z,}sh(N)
      $plugin/*.{z,}sh{-theme,}(N)
    )
    if [[ ${#initfiles[@]} -eq 0 ]]; then
      echo "# ERROR: plugin init file not found '$plugin'." && continue
    fi
    initfile="${initfiles[1]}"
    echo "source $initfile"
    echo "fpath+=( $plugin )"
  fi
done
